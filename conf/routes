# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


######   Proposed new calls

#GET	/users/:FBuserID

#GET	/features/:featureID
#GET	/features/all
#GET	/features/tag/:hashTag
#(#GET	/features/user/:FBuserID)?
#GET	/features/box/:lat1/:lon1/:lat2/:lon2
#GET	/features/radius/:lat/:lon/:distanceInMeters
#GET	/features/recent/:lat/:lon
#POST	/features/create
#POST	/features/update
#POST	/features/delete

#GET	/images/:imageID

#(sessions to be further discussed)
#GET	/sessions/:sessionID
#GET	/sessions/all
#GET	/sessions/user/:FBuserID
#POST	/sessions/create


#####   Test calls for SQL conversion

#GET		/userlist												controllers.TestController.allusers()
#GET		/taglist												controllers.TestController.alltags()
#POST	/adduser													controllers.TestController.addUser()
#POST	/addfeature													controllers.TestController.addUserFeature()
#POST	/userfeatures												controllers.TestController.getUserFeatures()
#GET     /s3image													controllers.S3Controller.index()
#POST    /s3image													controllers.S3Controller.upload()
#GET	/user/:userID												controllers.Features.getGeoFeaturesByUserId(userID:String)
#GET	/user/id/:userID											controllers.Features.getGeoFeaturesByUserId(userID:String)

#####	Home page
GET    			/													controllers.Application.index()

#####	Kml action
GET     		/kml												controllers.Application.getKml()
#####	Delete action
#GET     		/deleteall											controllers.Application.clearDB()

#####	Map static resources from the /public folder to the /assets URL path
GET     		/resources/*file               						controllers.Assets.at(path="/public", file)

#####	Geo Features
POST			/geo												controllers.Features.createGeoFeature()
PUT				/geo												controllers.Features.updateGeoFeature()
DELETE			/geo												controllers.Features.deleteGeoFeature(id:String, user_id:String, sessions:String)
GET				/user/username/:userName/:sessions					controllers.Features.getGeoFeaturesByUserName(userName:String, sessions:String)
GET				/search/:hashTag/:sessions							controllers.Features.getGeoFeaturesByTag(hashTag:String, sessions:String)

# sessions supplied as parameter in this call
GET				/geo/												controllers.Features.getAllGeoFeatures(sessions:String)

# sessions supplied as parameter in this call
GET				/geo/:id											controllers.Features.getFeatureById(id:String, sessions:String)															

# sessions supplied as parameter in this call
GET				/geo/box/											controllers.Features.getGeoFeaturesInBoundingBox(lng1:String, lat1:String, lng2:String, lat2:String, sessions:String)

GET				/geo/radius/:lng/:lat/:radiusInMeters/:sessions		controllers.Features.getFeaturesInRadius(lng:String, lat:String, radiusInMeters:String, sessions:String)
GET				/geo/recent/:lng/:lat/:sessions						controllers.Features.getMostRecentGeoFeatures(lng:String, lat:String, sessions:String)
GET				/geo/session/kml/:sessionId							controllers.Features.getKmlBySessionId(sessionId:String)
GET				/geo/user/kml/:userId								controllers.Features.getKmlByUserId(userId:String)

#####	Geo Content
#GET			/image/:id											controllers.Features.showImage(id:Long)
GET				/content/:id										controllers.Contents.contentOfFeature(id:String)
GET				/instagram/:id										controllers.Contents.contentOfInstaPOI(id:String)
GET				/instagramAuthorisation/							controllers.Authorisation.instagram(code:String)

##### Mapping Sessions ######
# Add Session														create a new session with admin_id
POST     		/session/new          						    	controllers.Sessions.create()
GET				/session/:id										controllers.Sessions.getSessionById(id:String)

#POST     		/session                 						 	controllers.Sessions.save()
#DELETE			/session/:id/:user_id								controllers.Sessions.delete(id:String, user_id:String)
#GET			/session/:listing/:group_id							return a listing of groups that have been MAPPA associated



#### image post to S3 ####
#GET     /image                    	controllers.S3Controller.index()
#POST    /image                      controllers.S3Controller.upload()
